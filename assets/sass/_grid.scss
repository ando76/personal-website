

/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columnsâ€™ gutters.
 */
#{$class-type}grid{
    list-style:none;                /* [1] */
    margin:0;                       /* [2] */
    padding:0;                      /* [2] */
    margin-left:-$gutter;           /* [3] */
    @if $use-markup-fix != true{
        letter-spacing:-0.31em;
    }
}

@if $use-markup-fix != true{
    /* Opera hack */
    .opera:-o-prefocus,
    #{$class-type}grid{
        word-spacing:-0.43em;
    }
}


    /**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
    #{$class-type}grid__item{
        float:left;                     /* [1] */
        /*display:inline-block;            [1] */
        padding-left:$gutter;           /* [2] */
        vertical-align:top;             /* [3] */
        @if $mobile-first == true{
            width:100%;                 /* [4] */
        }
        -webkit-box-sizing:border-box;  /* [5] */
           -moz-box-sizing:border-box;  /* [5] */
                box-sizing:border-box;  /* [5] */
                *behavior: url(/rocket-booster/js/vendor/boxsizing.htc); /* Move into IE7 css - simulates box-sizing in IE7 */
        @if $use-markup-fix != true{
            letter-spacing:normal;
            word-spacing:normal;
        }
        
    }


    /**
     * Gutterless grids have all the properties of regular grids, minus any spacing.
     */
    #{$class-type}grid--full{
        @extend #{$class-type}grid;
        margin-left:0;

        > #{$class-type}grid__item{
            padding-left:0;
        }
    }
    
/*------------------------------------*\
    $GRID GUTTER ADJUSTMENTS - Neil
\*------------------------------------*/

 @include grid-media-query ('lap') {

    #{$class-type}grid {
        margin-left:-($gutter * 2);           /* gutter for lap is 16 + 16 = 32px */
    }

    #{$class-type}grid__item {
        padding-left:$gutter * 2;           /* gutter for lap is 16 + 16 = 32px */
    }

    /*------------------------------------*\
      $GRID MODIFIERS 
    \*------------------------------------*/

    .grid--horz-twinkle {
        margin-left:-($gutter / 2);           /* Use 1/2 mobile gutter dimension 8px for specific items e.g. components such as carousel tiles */
    }

    .grid--horz-twinkle > #{$class-type}grid__item {
        padding-left:$gutter / 2;              /* Affect immediate child grid__items only */
    }

    .grid--horz-baby {
        margin-left:-($gutter);           /* Use mobile gutter dimension 16px for specific items e.g. components such as sub nav or group of 4 tools link tiles */
    }

    .grid--horz-baby > #{$class-type}grid__item {
        padding-left:$gutter;              /* Affect immediate child grid__items only */
    }

    .grid--horz-mama {
        margin-left:-($gutter * 2);           /* Use lap gutter dimension 32px for specific items e.g. 3 column articles */
    }

    .grid--horz-mama > #{$class-type}grid__item {
        padding-left:$gutter * 2;              /* Affect immediate child grid__items only */
    }

    /**
     * Gutterless grids have all the properties of regular grids, minus any spacing.
     */
    #{$class-type}grid--full{
        @extend #{$class-type}grid;
        margin-left:0;

        > #{$class-type}grid__item{
            padding-left:0;
        }
    }


}

@include grid-media-query ('desk') {

    #{$class-type}grid {
        margin-left:-($gutter * 3);           /* gutter for desk 16 + 32 = 48px */
    }

    #{$class-type}grid__item {
        padding-left:$gutter * 3;           /* gutter for desk 16 + 32 = 48px */
    }

    /*------------------------------------*\
      $GRID MODIFIERS 
    \*------------------------------------*/

    .grid--horz-twinkle {
        margin-left:-($gutter / 2);           /* Use 1/2 mobile gutter dimension 8px for specific items e.g. components such as carousel tiles */
    }

    .grid--horz-twinkle > #{$class-type}grid__item {
        padding-left:$gutter / 2;              /* Affect immediate child grid__items only */
    }

    .grid--horz-baby {
        margin-left:-($gutter);           /* Use mobile gutter dimension 16px for specific items e.g. components such as sub nav or group of 4 tools link tiles */
    }

    .grid--horz-baby > #{$class-type}grid__item {
        padding-left:$gutter;              /* Affect immediate child grid__items only */
    }

    .grid--horz-mama {
        margin-left:-($gutter * 2);           /* Use lap gutter dimension 32px for specific items e.g. 3 column articles */
    }

    .grid--horz-mama > #{$class-type}grid__item {
        padding-left:$gutter * 2;              /* Affect immediate child grid__items only */
    }


    /**
     * Gutterless grids have all the properties of regular grids, minus any spacing.
     */
    #{$class-type}grid--full{
        @extend #{$class-type}grid;
        margin-left:0;

        > #{$class-type}grid__item{
            padding-left:0;
        }
    }


    
}








/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
@mixin device-type($namespace:""){


    /**
     * Whole
     */
    #{$class-type}#{$namespace}one-whole         { width:100%; }


    /**
     * Halves
     */
    #{$class-type}#{$namespace}one-half          { width:50%; }


    /**
     * Thirds
     */
    #{$class-type}#{$namespace}one-third         { width:33.333%; }
    #{$class-type}#{$namespace}two-thirds        { width:66.666%; }


    /**
     * Quarters
     */
    #{$class-type}#{$namespace}one-quarter       { width:25%; }
    #{$class-type}#{$namespace}two-quarters      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}three-quarters    { width:75%; }


    /**
     * Fifths
     */
    #{$class-type}#{$namespace}one-fifth         { width:20%; }
    #{$class-type}#{$namespace}two-fifths        { width:40%; }
    #{$class-type}#{$namespace}three-fifths      { width:60%; }
    #{$class-type}#{$namespace}four-fifths       { width:80%; }


    /**
     * Sixths
     */
    #{$class-type}#{$namespace}one-sixth         { width:16.666%; }
    #{$class-type}#{$namespace}two-sixths        { @extend #{$class-type}#{$namespace}one-third; }
    #{$class-type}#{$namespace}three-sixths      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}four-sixths       { @extend #{$class-type}#{$namespace}two-thirds; }
    #{$class-type}#{$namespace}five-sixths       { width:83.333%; }


    /**
     * Eighths
     */
    #{$class-type}#{$namespace}one-eighth        { width:12.5%; }
    #{$class-type}#{$namespace}two-eighths       { @extend #{$class-type}#{$namespace}one-quarter; }
    #{$class-type}#{$namespace}three-eighths     { width:37.5%; }
    #{$class-type}#{$namespace}four-eighths      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}five-eighths      { width:62.5%; }
    #{$class-type}#{$namespace}six-eighths       { @extend #{$class-type}#{$namespace}three-quarters; }
    #{$class-type}#{$namespace}seven-eighths     { width:87.5%; }


    /**
     * Tenths
     */
    #{$class-type}#{$namespace}one-tenth         { width:10%; }
    #{$class-type}#{$namespace}two-tenths        { @extend #{$class-type}#{$namespace}one-fifth; }
    #{$class-type}#{$namespace}three-tenths      { width:30%; }
    #{$class-type}#{$namespace}four-tenths       { @extend #{$class-type}#{$namespace}two-fifths; }
    #{$class-type}#{$namespace}five-tenths       { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}six-tenths        { @extend #{$class-type}#{$namespace}three-fifths; }
    #{$class-type}#{$namespace}seven-tenths      { width:70%; }
    #{$class-type}#{$namespace}eight-tenths      { @extend #{$class-type}#{$namespace}four-fifths; }
    #{$class-type}#{$namespace}nine-tenths       { width:90%; }


    /**
     * Twelfths
     */
    #{$class-type}#{$namespace}one-twelfth       { width:8.333%; }
    #{$class-type}#{$namespace}two-twelfths      { @extend #{$class-type}#{$namespace}one-sixth; }
    #{$class-type}#{$namespace}three-twelfths    { @extend #{$class-type}#{$namespace}one-quarter; }
    #{$class-type}#{$namespace}four-twelfths     { @extend #{$class-type}#{$namespace}one-third; }
    #{$class-type}#{$namespace}five-twelfths     { width:41.666% }
    #{$class-type}#{$namespace}six-twelfths      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}seven-twelfths    { width:58.333%; }
    #{$class-type}#{$namespace}eight-twelfths    { @extend #{$class-type}#{$namespace}two-thirds; }
    #{$class-type}#{$namespace}nine-twelfths     { @extend #{$class-type}#{$namespace}three-quarters; }
    #{$class-type}#{$namespace}ten-twelfths      { @extend #{$class-type}#{$namespace}five-sixths; }
    #{$class-type}#{$namespace}eleven-twelfths   { width:91.666%; }


}


/**
 * Our regular, non-responsive width classes.
 */
@include device-type();


/**
 * Our responsive classes, if we have enabled them.
 */
@if $responsive == true{

    @each $name in $breakpoint-has-widths {
        @include grid-media-query($name) {
           @include device-type('#{$name}--');
        }
    }


}

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
* Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
* Extend the clearfix class with Sass to avoid the `.cf` class appearing over
* and over in your markup.
*/
.cf, #{$class-type}grid__item, , .shelf--pad, .pod, .pod--pad, #{$class-type}grid {
    &:after{
        content:"";
        display:table;
        clear:both;

    }
    zoom:1;
}

/*------------------------------------*\
    $CONTENT-BLOCKS
\*------------------------------------*/
/**
 * These form the basis of content-blocks that sit inside the grid__items
 */
.pod {margin:0;padding:0;xposition:relative;}

.shelf--pad {
    padding:$gutter $gutter 0 $gutter;

    @include grid-media-query ('lap'){
        padding: $gutter*2 $gutter*2 0;
    }

    @include grid-media-query ('desk'){
        padding: $gutter*2 $gutter*3 0;
    }
}

.pod--pad {
    padding:$gutter $gutter 0 $gutter;
    margin-bottom:$gutter;

    @include grid-media-query ('lap'){
        margin-bottom:$gutter*2;
    }
}